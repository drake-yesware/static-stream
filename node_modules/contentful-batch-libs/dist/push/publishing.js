'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.publishEntities = publishEntities;
exports.unpublishEntities = unpublishEntities;

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _npmlog = require('npmlog');

var _npmlog2 = _interopRequireDefault(_npmlog);

var _getEntityName = require('./get-entity-name');

var _getEntityName2 = _interopRequireDefault(_getEntityName);

var _errorBuffer = require('../utils/error-buffer');

var _errorBuffer2 = _interopRequireDefault(_errorBuffer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var lastQueueLength = 0;

function runQueue(queue, result) {
  if (!result) {
    result = [];
  }
  queue = queue.filter(function (entity) {
    if (!entity || !entity.publish) {
      _npmlog2.default.info('Error while publishing entity: Unable to parse entity');
      _npmlog2.default.info(`Unparseable entity: ${JSON.stringify(entity, null, 0)}`);
      return false;
    }
    return true;
  });
  _npmlog2.default.info(`Starting new publishing queue: ${queue.map(function (entity) {
    return entity.sys.id;
  }).join(', ')}`);
  return _bluebird2.default.map(queue, function (entity, index) {
    return entity.publish().then(function (entity) {
      _npmlog2.default.info(`Published ${entity.sys.type} ${(0, _getEntityName2.default)(entity)}`);
      result.push(entity);
      return null;
    }, function (err) {
      _errorBuffer2.default.push(err);
      var apiError = JSON.parse(err.message);
      var errors = apiError.details.errors || [];
      if (apiError.status === 422 && errors.findIndex(function (error) {
        return error.name === 'notResolvable';
      }) !== -1) {
        _npmlog2.default.info(`Unable to resolve ${entity.sys.id} (${(0, _getEntityName2.default)(entity)})`);
        return entity;
      }
      _npmlog2.default.info(`Failed to publish ${entity.sys.id} (${(0, _getEntityName2.default)(entity)})`);
      return null;
    });
  }, { concurrency: 1 }).then(function (entities) {
    return entities.filter(function (entity) {
      return entity;
    });
  }).then(function (entities) {
    if (entities.length > 0) {
      if (lastQueueLength && lastQueueLength === entities.length) {
        _errorBuffer2.default.push(new Error('Queue was not able to publish at least one entity. Aborting.'));
        var failedEntities = entities.map(function (entitiy) {
          return entitiy.sys.id;
        });
        return result.filter(function (entity) {
          return !failedEntities.includes(entity.sys.id);
        });
      }
      lastQueueLength = entities.length;

      _npmlog2.default.info(`Found ${entities.length} unpublished entities`);
      return runQueue(entities, result);
    }
    return result;
  });
}

/**
 * Publish a list of entities.
 * Does not return a rejected promise in the case of an error, pushing it
 * to an error buffer instead.
 */
function publishEntities(entities) {
  if (entities.length === 0) {
    _npmlog2.default.info(`Skip publishing since zero entities passed`);
    return entities;
  }
  var entity = entities[0].original || entities[0];
  var type = entity.sys.type || 'unknown type';
  _npmlog2.default.info(`Starting publishing ${entities.length} ${type}s`);

  lastQueueLength = entities.length;
  return runQueue(entities).then(function (result) {
    _npmlog2.default.info(`Finished publishing ${entities.length} ${type}s. Returning ${result.length} entities`);
    return result;
  });
}

/**
 * Unpublish a list of entities.
 * Returns a reject promise if unpublishing fails.
 */
function unpublishEntities(entities) {
  return _bluebird2.default.map(entities, function (entity, index) {
    if (!entity || !entity.unpublish) {
      _npmlog2.default.info('Error While Unpublishing: entity undefined entity at index ' + index);
      return _bluebird2.default.resolve(entity);
    }
    return entity.unpublish().then(function (entity) {
      _npmlog2.default.info(`Unpublished ${entity.sys.type} ${(0, _getEntityName2.default)(entity)}`);
      return entity;
    }, function (err) {
      // In case the entry has already been unpublished
      if (err.name === 'BadRequest') return entity;
      throw err;
    });
  });
}