'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getFullSourceSpace;

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _listr = require('listr');

var _listr2 = _interopRequireDefault(_listr);

var _listrVerboseRenderer = require('listr-verbose-renderer');

var _listrVerboseRenderer2 = _interopRequireDefault(_listrVerboseRenderer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MAX_ALLOWED_LIMIT = 1000;
var pageLimit = MAX_ALLOWED_LIMIT;
/**
 * Gets all the content from a space via the management API. This includes
 * content in draft state.
 */
function getFullSourceSpace(_ref) {
  var managementClient = _ref.managementClient,
      deliveryClient = _ref.deliveryClient,
      spaceId = _ref.spaceId,
      skipContentModel = _ref.skipContentModel,
      skipContent = _ref.skipContent,
      skipWebhooks = _ref.skipWebhooks,
      skipRoles = _ref.skipRoles,
      includeDrafts = _ref.includeDrafts,
      maxAllowedLimit = _ref.maxAllowedLimit,
      listrOptions = _ref.listrOptions;

  pageLimit = maxAllowedLimit || MAX_ALLOWED_LIMIT;
  listrOptions = listrOptions || {
    renderer: _listrVerboseRenderer2.default
  };

  return new _listr2.default([{
    title: 'Connecting to space',
    task: function task(ctx) {
      return managementClient.getSpace(spaceId).then(function (space) {
        ctx.space = space;
      }).catch(function (err) {
        console.error(`
The destination space was not found. This can happen for multiple reasons:
- If you haven't yet, you should create your space manually.
- If your destination space is in another organization, and your user from the source space does not have access to it, you'll need to specify separate sourceManagementToken and destinationManagementToken

Full error details below.
`);
        throw err;
      });
    }
  }, {
    title: 'Fetching content types data',
    task: function task(ctx) {
      return pagedGet(ctx.space, 'getContentTypes').then(extractItems).then(function (items) {
        ctx.data.contentTypes = items;
      });
    },
    skip: function skip() {
      return skipContentModel;
    }
  }, {
    title: 'Fetching editor interfaces data',
    task: function task(ctx) {
      return getEditorInterfaces(ctx.data.contentTypes).then(function (editorInterfaces) {
        ctx.data.editorInterfaces = editorInterfaces.filter(function (editorInterface) {
          return editorInterface !== null;
        });
      });
    },
    skip: function skip(ctx) {
      return skipContentModel || ctx.data.contentTypes.length === 0 && 'Skipped since no content types downloaded';
    }
  }, {
    title: 'Fetching content entries data',
    task: function task(ctx) {
      return pagedGet(ctx.space, 'getEntries').then(extractItems).then(function (items) {
        return filterDrafts(items, includeDrafts);
      }).then(function (items) {
        ctx.data.entries = items;
      });
    },
    skip: function skip() {
      return skipContent;
    }
  }, {
    title: 'Fetching assets data',
    task: function task(ctx) {
      return pagedGet(ctx.space, 'getAssets').then(extractItems).then(function (items) {
        ctx.data.assets = items;
      });
    },
    skip: function skip() {
      return skipContent;
    }
  }, {
    title: 'Fetching locales data',
    task: function task(ctx) {
      return pagedGet(ctx.space, 'getLocales').then(extractItems).then(function (items) {
        ctx.data.locales = items;
      });
    },
    skip: function skip() {
      return skipContentModel;
    }
  }, {
    title: 'Fetching webhooks data',
    task: function task(ctx) {
      return pagedGet(ctx.space, 'getWebhooks').then(extractItems).then(function (items) {
        ctx.data.webhooks = items;
      });
    },
    skip: function skip() {
      return skipWebhooks;
    }
  }, {
    title: 'Fetching roles data',
    task: function task(ctx) {
      return pagedGet(ctx.space, 'getRoles').then(extractItems).then(function (items) {
        ctx.data.roles = items;
      });
    },
    skip: function skip() {
      return skipRoles;
    }
  }], listrOptions);
}
function getEditorInterfaces(contentTypes) {
  var editorInterfacePromises = contentTypes.map(function (contentType) {
    // old contentTypes may not have an editor interface but we'll handle in a later stage
    // but it should not stop getting the data process
    return contentType.getEditorInterface().catch(function () {
      return _bluebird2.default.resolve(null);
    });
  });
  return _bluebird2.default.all(editorInterfacePromises);
}

/**
 * Gets all the existing entities based on pagination parameters.
 * The first call will have no aggregated response. Subsequent calls will
 * concatenate the new responses to the original one.
 */
function pagedGet(space, method) {
  var skip = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var aggregatedResponse = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

  return space[method]({
    skip: skip,
    limit: pageLimit,
    order: 'sys.createdAt'
  }).then(function (response) {
    if (!aggregatedResponse) {
      aggregatedResponse = response;
    } else {
      aggregatedResponse.items = aggregatedResponse.items.concat(response.items);
    }
    if (skip + pageLimit <= response.total) {
      return pagedGet(space, method, skip + pageLimit, aggregatedResponse);
    }
    return aggregatedResponse;
  });
}

function extractItems(response) {
  return response.items;
}

function filterDrafts(items, includeDrafts) {
  return includeDrafts ? items : items.filter(function (item) {
    return !!item.sys.publishedVersion;
  });
}
module.exports = exports['default'];